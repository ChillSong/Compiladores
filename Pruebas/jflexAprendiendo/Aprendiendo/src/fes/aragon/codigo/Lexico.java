// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Config.flex

package Pruebas.jflexAprendiendo.Aprendiendo.src.fes.aragon.codigo;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  4,  4,  2,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     2,  0,  0,  0,  0,  5,  0,  0,  6,  7,  8,  9,  0, 10, 11,  0, 
    12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  0, 13,  0, 14,  0,  0, 
     0, 15, 15, 15, 15, 16, 15, 15, 15, 17, 15, 15, 15, 15, 15, 15, 
    18, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  0,  0,  0, 19,  0, 
     0, 20, 21, 22, 23, 24, 25, 26, 27, 28, 15, 29, 30, 31, 32, 33, 
    34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\2\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\2\1\1\1\13\1\14\1\1\1\15"+
    "\24\0\1\1\67\0\1\16\1\0\1\16\1\17\10\0"+
    "\1\20\101\0\1\16\240\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[332];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\55\0\264\0\264\0\264"+
    "\0\264\0\264\0\264\0\264\0\341\0\55\0\264\0\u010e"+
    "\0\264\0\u013b\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249"+
    "\0\u0276\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1"+
    "\0\u03de\0\u040b\0\u0438\0\264\0\u0465\0\u0492\0\u04bf\0\u04ec"+
    "\0\u0519\0\u0546\0\u0573\0\u05a0\0\u05cd\0\u05fa\0\u0627\0\u0654"+
    "\0\u0681\0\u06ae\0\u06db\0\u0708\0\u0735\0\u0762\0\u078f\0\u07bc"+
    "\0\u07e9\0\u0816\0\u0843\0\u0870\0\u089d\0\u08ca\0\u08f7\0\u0924"+
    "\0\u0951\0\u097e\0\u09ab\0\u09d8\0\u0a05\0\u0a32\0\u0a5f\0\u0a8c"+
    "\0\u0ab9\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d\0\u0b9a\0\u0bc7\0\u0bf4"+
    "\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02\0\u0d2f\0\u0d5c"+
    "\0\u0d89\0\u0db6\0\u0de3\0\u0e10\0\u0e3d\0\u0e6a\0\u0e97\0\u0ec4"+
    "\0\55\0\u0ef1\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5\0\u0fd2\0\u0fff"+
    "\0\u102c\0\264\0\u1059\0\u1086\0\u10b3\0\u10e0\0\u110d\0\u113a"+
    "\0\u1167\0\u1194\0\u11c1\0\u11ee\0\u121b\0\u1248\0\u1275\0\u12a2"+
    "\0\u12cf\0\u12fc\0\u1329\0\u1356\0\u1383\0\u13b0\0\u13dd\0\u140a"+
    "\0\u1437\0\u1464\0\u1491\0\u14be\0\u14eb\0\u1518\0\u1545\0\u1572"+
    "\0\u159f\0\u15cc\0\u15f9\0\u1626\0\u1653\0\u1680\0\u16ad\0\u16da"+
    "\0\u1707\0\u1734\0\u1761\0\u178e\0\u17bb\0\u17e8\0\u1815\0\u1842"+
    "\0\u186f\0\u189c\0\u18c9\0\u18f6\0\u1923\0\u1950\0\u197d\0\u19aa"+
    "\0\u19d7\0\u1a04\0\u1a31\0\u1a5e\0\u1a8b\0\u1ab8\0\u1ae5\0\u1b12"+
    "\0\u1b3f\0\u1b6c\0\u1b99\0\u0e97\0\u1bc6\0\u1bf3\0\u1c20\0\u1c4d"+
    "\0\u1c7a\0\u1ca7\0\u1cd4\0\u1d01\0\u1d2e\0\u1d5b\0\u1d88\0\u1db5"+
    "\0\u1de2\0\u1e0f\0\u1e3c\0\u1e69\0\u1e96\0\u1ec3\0\u1ef0\0\u1f1d"+
    "\0\u1f4a\0\u1f77\0\u1fa4\0\u1fd1\0\u1ffe\0\u202b\0\u2058\0\u2085"+
    "\0\u20b2\0\u20df\0\u210c\0\u2139\0\u2166\0\u2193\0\u21c0\0\u21ed"+
    "\0\u221a\0\u2247\0\u2274\0\u22a1\0\u22ce\0\u22fb\0\u2328\0\u2355"+
    "\0\u2382\0\u23af\0\u23dc\0\u2409\0\u2436\0\u2463\0\u2490\0\u24bd"+
    "\0\u24ea\0\u2517\0\u2544\0\u2571\0\u259e\0\u25cb\0\u25f8\0\u2625"+
    "\0\u2652\0\u267f\0\u26ac\0\u26d9\0\u2706\0\u2733\0\u2760\0\u278d"+
    "\0\u27ba\0\u27e7\0\u2814\0\u2841\0\u286e\0\u289b\0\u28c8\0\u28f5"+
    "\0\u2922\0\u294f\0\u297c\0\u29a9\0\u29d6\0\u2a03\0\u2a30\0\u2a5d"+
    "\0\u2a8a\0\u2ab7\0\u2ae4\0\u2b11\0\u2b3e\0\u2b6b\0\u2b98\0\u2bc5"+
    "\0\u2bf2\0\u2c1f\0\u2c4c\0\u2c79\0\u2ca6\0\u2cd3\0\u2d00\0\u2d2d"+
    "\0\u2d5a\0\u2d87\0\u2db4\0\u2de1\0\u2e0e\0\u2e3b\0\u2e68\0\u2e95"+
    "\0\u2ec2\0\u2eef\0\u2f1c\0\u2f49\0\u2f76\0\u2fa3\0\u2fd0\0\u2ffd"+
    "\0\u302a\0\u3057\0\u3084\0\u30b1\0\u30de\0\u310b\0\u3138\0\u3165"+
    "\0\u3192\0\u31bf\0\u31ec\0\u3219\0\u3246\0\u3273\0\u32a0\0\u32cd"+
    "\0\u32fa\0\u3327\0\u3354\0\u3381\0\u33ae\0\u33db\0\u3408\0\u3435"+
    "\0\u3462\0\u348f\0\u34bc\0\u34e9\0\u3516\0\u3543\0\u3570\0\u359d"+
    "\0\u35ca\0\u35f7\0\u3624\0\u3651\0\u367e\0\u36ab\0\u36d8\0\u3705"+
    "\0\u3732\0\u375f\0\u378c\0\u37b9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[332];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\0\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\4\20"+
    "\1\21\31\20\77\0\1\22\1\0\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\2\0\1\31\1\0\1\32\1\33"+
    "\1\34\1\0\1\35\1\0\1\36\1\37\1\40\1\0"+
    "\1\41\1\42\5\0\1\4\53\0\1\43\3\0\10\44"+
    "\1\16\37\44\1\0\1\43\3\0\6\44\1\45\1\15"+
    "\1\16\1\44\1\20\1\46\2\20\1\44\4\20\1\46"+
    "\24\20\1\0\1\43\3\0\7\44\1\20\1\16\1\44"+
    "\4\20\1\44\31\20\21\0\1\47\60\0\1\50\70\0"+
    "\1\51\2\0\1\52\6\0\1\53\25\0\1\54\6\0"+
    "\1\55\2\0\1\56\2\0\1\57\43\0\1\60\10\0"+
    "\1\61\51\0\1\62\1\0\1\63\11\0\1\64\36\0"+
    "\1\65\1\0\1\66\2\0\1\67\44\0\1\70\5\0"+
    "\1\71\1\72\55\0\1\73\37\0\1\74\7\0\1\75"+
    "\44\0\1\76\3\0\1\77\16\0\1\100\31\0\1\101"+
    "\17\0\1\102\2\0\1\103\35\0\1\104\57\0\1\105"+
    "\7\0\1\106\2\0\1\107\1\110\1\0\1\111\1\0"+
    "\1\112\34\0\1\113\10\0\1\114\51\0\1\115\46\0"+
    "\1\116\45\0\1\117\1\120\1\121\1\122\1\123\1\124"+
    "\2\0\1\125\1\0\1\126\1\0\1\127\1\0\1\130"+
    "\1\0\1\131\1\132\1\133\1\0\1\134\1\135\4\0"+
    "\1\43\3\0\7\44\1\136\1\16\37\44\1\0\1\43"+
    "\3\0\4\44\2\137\1\44\1\140\1\16\1\44\4\20"+
    "\1\44\31\20\1\0\1\141\120\0\1\142\50\0\1\143"+
    "\43\0\1\144\72\0\1\145\53\0\1\145\1\146\32\0"+
    "\1\67\54\0\1\147\70\0\1\150\45\0\1\151\24\0"+
    "\1\152\45\0\1\153\52\0\1\145\56\0\1\154\53\0"+
    "\1\155\46\0\1\156\55\0\1\157\57\0\1\70\11\0"+
    "\1\152\115\0\1\160\57\0\1\161\1\162\40\0\1\47"+
    "\5\0\1\163\66\0\1\47\42\0\1\47\62\0\1\164"+
    "\57\0\1\70\41\0\1\165\44\0\1\166\62\0\1\167"+
    "\4\0\1\170\40\0\1\171\75\0\1\172\47\0\1\173"+
    "\57\0\1\47\34\0\1\174\17\0\1\175\52\0\1\176"+
    "\46\0\1\177\60\0\1\200\50\0\1\201\7\0\1\202"+
    "\34\0\1\203\26\0\1\70\35\0\1\204\1\0\1\205"+
    "\52\0\1\206\45\0\1\207\70\0\1\210\2\0\1\211"+
    "\6\0\1\212\25\0\1\213\6\0\1\214\2\0\1\215"+
    "\2\0\1\216\43\0\1\217\10\0\1\220\51\0\1\221"+
    "\1\0\1\222\11\0\1\223\36\0\1\224\1\0\1\225"+
    "\2\0\1\226\44\0\1\227\5\0\1\230\1\231\55\0"+
    "\1\232\37\0\1\233\3\0\1\234\16\0\1\235\31\0"+
    "\1\236\17\0\1\237\2\0\1\240\35\0\1\241\57\0"+
    "\1\242\12\0\1\243\1\244\1\0\1\245\1\0\1\246"+
    "\34\0\1\247\10\0\1\250\51\0\1\251\46\0\1\252"+
    "\22\0\1\43\3\0\7\44\1\136\1\16\2\44\1\253"+
    "\7\44\1\253\24\44\1\0\1\43\3\0\7\44\1\254"+
    "\1\16\37\44\1\0\1\43\3\0\7\44\1\140\1\16"+
    "\1\44\4\20\1\44\31\20\46\0\1\255\44\0\1\256"+
    "\42\0\1\257\60\0\1\70\52\0\1\260\73\0\1\201"+
    "\55\0\1\261\32\0\1\262\55\0\1\206\66\0\1\70"+
    "\45\0\1\263\50\0\1\264\54\0\1\265\66\0\1\266"+
    "\2\0\1\173\61\0\1\267\7\0\1\152\26\0\1\270"+
    "\56\0\1\70\56\0\1\271\56\0\1\70\53\0\1\272"+
    "\67\0\1\273\52\0\1\274\44\0\1\275\65\0\1\276"+
    "\51\0\1\265\56\0\1\275\42\0\1\277\50\0\1\67"+
    "\72\0\1\146\34\0\1\300\73\0\1\70\50\0\1\301"+
    "\53\0\1\302\43\0\1\70\51\0\1\303\66\0\1\145"+
    "\63\0\1\304\50\0\1\305\43\0\1\306\72\0\1\307"+
    "\53\0\1\307\1\310\32\0\1\226\54\0\1\311\70\0"+
    "\1\312\45\0\1\313\24\0\1\44\45\0\1\314\52\0"+
    "\1\307\56\0\1\315\53\0\1\316\46\0\1\317\55\0"+
    "\1\320\57\0\1\227\11\0\1\44\115\0\1\321\57\0"+
    "\1\322\1\323\46\0\1\324\62\0\1\325\57\0\1\227"+
    "\41\0\1\326\44\0\1\327\62\0\1\330\4\0\1\331"+
    "\40\0\1\332\75\0\1\333\47\0\1\334\37\0\1\335"+
    "\17\0\1\336\52\0\1\337\46\0\1\340\60\0\1\341"+
    "\50\0\1\342\7\0\1\343\34\0\1\344\26\0\1\227"+
    "\35\0\1\345\1\0\1\346\52\0\1\347\21\0\1\43"+
    "\3\0\4\44\2\137\1\44\1\254\1\16\37\44\44\0"+
    "\1\350\40\0\1\351\61\0\1\70\52\0\1\70\55\0"+
    "\1\352\67\0\1\353\45\0\1\354\52\0\1\355\64\0"+
    "\1\70\36\0\1\356\50\0\1\357\74\0\1\360\60\0"+
    "\1\145\30\0\1\361\54\0\1\53\60\0\1\362\60\0"+
    "\1\363\64\0\1\364\36\0\1\365\61\0\1\366\72\0"+
    "\1\367\50\0\1\370\55\0\1\116\54\0\1\371\44\0"+
    "\1\372\42\0\1\373\60\0\1\227\52\0\1\374\73\0"+
    "\1\342\55\0\1\375\32\0\1\376\55\0\1\347\66\0"+
    "\1\227\45\0\1\377\50\0\1\u0100\54\0\1\u0101\66\0"+
    "\1\u0102\2\0\1\334\61\0\1\u0103\7\0\1\44\26\0"+
    "\1\u0104\56\0\1\227\56\0\1\u0105\56\0\1\227\53\0"+
    "\1\u0106\67\0\1\u0107\52\0\1\u0108\44\0\1\u0109\65\0"+
    "\1\u010a\51\0\1\u0101\56\0\1\u0109\42\0\1\u010b\50\0"+
    "\1\226\72\0\1\310\34\0\1\u010c\73\0\1\227\50\0"+
    "\1\u010d\53\0\1\u010e\43\0\1\227\51\0\1\u010f\66\0"+
    "\1\307\42\0\1\u0110\54\0\1\364\70\0\1\u0111\52\0"+
    "\1\265\45\0\1\201\26\0\1\152\34\0\1\u0112\55\0"+
    "\1\u0113\55\0\1\u0114\45\0\1\u0115\55\0\1\145\50\0"+
    "\1\u0116\54\0\1\70\66\0\1\70\62\0\1\u0117\52\0"+
    "\1\u0118\11\0\1\152\43\0\1\70\43\0\1\u0119\64\0"+
    "\1\u011a\40\0\1\u011b\61\0\1\227\52\0\1\227\55\0"+
    "\1\u011c\67\0\1\u011d\45\0\1\u011e\52\0\1\u011f\64\0"+
    "\1\227\36\0\1\u0120\50\0\1\u0121\74\0\1\u0122\60\0"+
    "\1\307\30\0\1\u0123\54\0\1\212\60\0\1\u0124\60\0"+
    "\1\u0125\64\0\1\u0126\36\0\1\u0127\61\0\1\u0128\72\0"+
    "\1\u0129\50\0\1\u012a\55\0\1\252\34\0\1\265\75\0"+
    "\1\145\60\0\1\70\31\0\1\u012b\52\0\1\u012c\52\0"+
    "\1\u012d\76\0\1\u012e\37\0\1\u012f\64\0\1\u0130\43\0"+
    "\1\u0131\50\0\1\u0132\54\0\1\u0126\70\0\1\u0133\52\0"+
    "\1\u0101\45\0\1\342\26\0\1\44\34\0\1\u0134\55\0"+
    "\1\u0135\55\0\1\u0136\45\0\1\u0137\55\0\1\307\50\0"+
    "\1\u0138\54\0\1\227\66\0\1\227\62\0\1\u0139\52\0"+
    "\1\u013a\11\0\1\44\43\0\1\227\43\0\1\u013b\60\0"+
    "\1\u013c\44\0\1\u013d\52\0\1\145\56\0\1\204\66\0"+
    "\1\70\52\0\1\u013e\54\0\1\265\42\0\1\u0101\75\0"+
    "\1\307\60\0\1\227\31\0\1\u013f\52\0\1\u0140\52\0"+
    "\1\u0141\76\0\1\u0142\37\0\1\u0143\64\0\1\u0144\43\0"+
    "\1\u0145\72\0\1\201\47\0\1\u0146\47\0\1\u0147\60\0"+
    "\1\u0148\44\0\1\u0149\52\0\1\307\56\0\1\345\66\0"+
    "\1\227\52\0\1\u014a\54\0\1\u0101\45\0\1\70\77\0"+
    "\1\u012e\46\0\1\342\47\0\1\u014b\47\0\1\u014c\51\0"+
    "\1\227\77\0\1\u0142";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14310];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\2\1\1\11\10\1\1\11\3\1\24\0"+
    "\1\1\67\0\1\1\1\0\1\1\1\11\10\0\1\1"+
    "\101\0\1\1\240\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[332];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
private boolean hayToken = false;

public boolean getHayToken() {
    return this.hayToken;
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
      this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    this.hayToken=false;
    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { Tokens tok = new Tokens(yytext(), Sym.ID, yyline, yycolumn);
    this.hayToken = true;
    return tok;
            }
            // fall through
          case 17: break;
          case 2:
            { System.out.println("Error léxico: '" + yytext() + "' en línea " + (yyline + 1) + ", columna " + (yycolumn + 1));
    this.hayToken = false;
            }
            // fall through
          case 18: break;
          case 3:
            { /* Ignorar espacios */
            }
            // fall through
          case 19: break;
          case 4:
            { /* Ignorar saltos de línea */
            }
            // fall through
          case 20: break;
          case 5:
            { Tokens tok = new Tokens(yytext(), Sym.PORCENTAJE, yyline, yycolumn);
    this.hayToken = true;
    return tok;
            }
            // fall through
          case 21: break;
          case 6:
            { Tokens tok = new Tokens(yytext(), Sym.PAREN_A, yyline, yycolumn);
    this.hayToken = true;
    return tok;
            }
            // fall through
          case 22: break;
          case 7:
            { Tokens tok = new Tokens(yytext(), Sym.PAREN_C, yyline, yycolumn);
    this.hayToken = true;
    return tok;
            }
            // fall through
          case 23: break;
          case 8:
            { Tokens tok = new Tokens(yytext(), Sym.POR, yyline, yycolumn);
    this.hayToken = true;
    return tok;
            }
            // fall through
          case 24: break;
          case 9:
            { Tokens tok = new Tokens(yytext(), Sym.MAS, yyline, yycolumn);
    this.hayToken = true;
    return tok;
            }
            // fall through
          case 25: break;
          case 10:
            { Tokens tok = new Tokens(yytext(), Sym.MENOS, yyline, yycolumn);
    this.hayToken = true;
    return tok;
            }
            // fall through
          case 26: break;
          case 11:
            { Tokens tok = new Tokens(yytext(), Sym.INSTRUCCION_COMPLETA, yyline, yycolumn);
    this.hayToken = true;
    return tok;
            }
            // fall through
          case 27: break;
          case 12:
            { Tokens tok = new Tokens(yytext(), Sym.IGUAL, yyline, yycolumn);
    this.hayToken = true;
    return tok;
            }
            // fall through
          case 28: break;
          case 13:
            { Tokens tok = new Tokens(yytext(), Sym.POTENCIA, yyline, yycolumn);
    this.hayToken = true;
    return tok;
            }
            // fall through
          case 29: break;
          case 14:
            { Tokens tok = new Tokens(yytext(), Sym.FLOTANTE, yyline, yycolumn);
    this.hayToken = true;
    return tok;
            }
            // fall through
          case 30: break;
          case 15:
            { Tokens tok = new Tokens(yytext(), Sym.FUNCION, yyline, yycolumn);
    this.hayToken = true;
    return tok;
            }
            // fall through
          case 31: break;
          case 16:
            { Tokens tok = new Tokens(yytext(), Sym.RESERVADA, yyline, yycolumn);
    this.hayToken = true;
    return tok;
            }
            // fall through
          case 32: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
